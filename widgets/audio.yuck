;; Compiled C
(deflisten audio-sources :initial "{}"
  `~/.config/eww/bin/mpris_fetch`)

(deflisten audio-sinks :initial "{}"
  `~/.config/eww/bin/audio_out`) 

(deflisten audioPosition :initial '{}'
  `~/.config/eww/bin/mpris_position`)

(defwidget forceLoadAudio []
  (label
    :visible false
    :text "${audioPosition} ${audio-sinks} ${audio-sources}"
  )
)
;; Shell Scripts (Archived)
; (deflisten audio-sources :initial ""
  ; `~/.config/eww/scripts/Archives/mpris_fetch`)

; (deflisten audio-sinks :initial ""
  ; `/usr/bin/bash ~/.config/eww/scripts/Archives/get-audio-sinks`) 

(defwidget audioButton []
  (eventbox 
    :tooltip 
`Audio panel:
Right click Mute
Left click open/close panel`
    :onclick "eww open --toggle audioPanel"
    :onrightclick "wpctl set-mute @DEFAULT_SINK@ toggle"
    (literal :content 
      {"${jq(audio-sinks, '.[] | select(.default == true) | (.mute == "no")') == true ? audioUnmuted : audioMuted}"
      }
    )
  )
)

(defvar audioMuted 
  '(label :text " " :class "large red")' 
)

(defvar audioUnmuted 
  '(label :text " " :class "large")' 
)

(defwindow audioPanel
  :monitor 1
  :stacking "fg"
  :geometry (geometry
              :width 500
              :anchor "top right")
  (eventbox
    :onhover 'eww update hover_state="audioPanel"'
    :onhoverlost 'eww update hover_state="" && ./scripts/check_hover.sh audioPanel &'
    (box
      :class "window"
      :space-evenly false 
      :orientation "v"
      (forceLoadAudio)
      (audioDevices)
      (audioSources)
    )
  )
)

(defwidget audioDevices []
  (box 
    :space-evenly false
    (label
      :text "${audio-sinks}"
      :visible false
      :show-truncated false
      :wrap true)
    (for s in audio-sinks
      (box
        :hexpand true
        :space-evenly false
        (button :class "${s.default == true ? "active" : "inactive"}"
          :onclick "wpctl set-default ${s.id}"
          :tooltip "${s.name}"
          :width 75
          :height 75
          (image 
            :path "./assets/icons/${s.icon == "audio-headset-bluetooth" ? "audio-earbuds" : s.icon == "audio-speakers" ? "audio-speakers" : "media-tape"}.svg"
            :image-height 42
          )
        )
        (box 
          :hexpand true
          :orientation "v"
          :space-evenly false
          :valign "end"
          (box :space-evenly false
            (label :class "inactive" :text "${s.volume}")
            (scale
              :hexpand true
              :class "low-vis pushright pushdown"
              :round-digits 0
              :min 0 
              :max 101
              :value "${s.volume}"
              :onchange "./scripts/set-volume ${s.id} {}"
            )
          )
          (eventbox 
            :halign "start" 
            :onclick "wpctl set-mute ${s.id} toggle" 
            (image 
              :image-height 24 
              :path "./assets/icons/audio-${s.mute == "yes" ? "muted" : "high"}.svg"
            )
          )
        )
      )
    )
  )
)


(defwidget audioSources []
  (box 
    :orientation "v"
    :space-evenly false
    (for p in audio-sources
      (eventbox
        :onhover `eww update playerhov="${p.Name}"`
        :onhoverlost `eww update playerhov=""`
        (box
          :class "panel"
          :visible "${p.PlaybackStatus == "Stopped" ? false : true}"
          :space-evenly false
          :orientation "v"
          (label 
            :class "green"
            :xalign 0
            :wrap true
            :show-truncated false
            :text "${p.title}"
          )
          (box 
            :space-evenly false
            :spacing 10
            (box
              :halign "start"
              (image 
                :image-height 100 
                :path "${matches(p.title, " - Twitch$") == true ? "./assets/TwitchLogo.png" : p.artUrl}"
              )
            )
            (box 
              :class "footer"
              :hexpand true
              :orientation "v"
              :space-evenly false
              (label :class "subtext" :xalign 0 :text "${p.artist}")
              (label :class "subtext" :xalign 0 :text "${p.album}")
; LOOKHERE
;              (label :text "${p.shuffle}, ${p.loop}")
;              (label 
;                :show-truncated false 
;                :wrap true 
;                :text "${jq(audioPosition, '."${p.Player}HMS"', "r")}")
;              (label 
;                :show-truncated false 
;                :wrap true 
;                :text "${jq(audioPosition, '."${p.Player}"')}")
;LOOKHERE
              (mediaButtons 
                :CanGoPrevious "${p.CanGoPrevious}"
                :CanGoNext "${p.CanGoNext}" 
                :CanPlay "${p.CanPlay}" 
                :Playing "${p.PlaybackStatus}" 
                :Name "${p.Name}" 
                :loop "${p.loop}" 
                :shuffle "${p.shuffle}" 
              )
              (scale
                :class "${p.CanSeek == false ? "inactive" :
                       "${matches(p.title, "Twitch$")}" == true ? "inactive" :
                       ""}"
                :max 100 
                :onchange "playerctl --player=${p.longName} position $((({} * ${round(p.length / 1000000,0)}) / 100))"
                :value "${round((100 / (p.length)) * (jq(audioPosition, '."${p.longName}"')),0)}"
                ; :value "${round((99 / (p.length)) * (p.Position),0)}"
              ) 
              (label
                :xalign 1 
                :class "${p.lengthHMS == "live" ? "red" : ""}"
                :text "${p.lengthHMS == "live" ? " live" : 
                         p.length == "" ? "--/--" :
                        "${replace(jq(audioPosition, '."${p.longName}HMS"'),"\"","")}/${p.lengthHMS}"
                        ; "${p.PositionHMS}/${p.lengthHMS}"
                        }"
              )
            )
          ) 
          (box 
            :space-evenly false
            :class "footer"
            (playerVolume
              :pvol "${p.volume}"
              :pmute "${p.mute}"
              :targetID "${p.id}"
              :sinkID "${p.sinkID}"
              :serial "${p.serial}"
              :switch "${p.Name}")
            (label 
              :class "subtext"
              :hexpand "${p.id == "null" ? true : false}"
              :halign "end" 
              :text "${p.Name}"
            )
          )
        )
      )
    )
  )
)


(defwidget mediaButtons [CanGoPrevious CanGoNext CanPlay 
                         Playing Name loop shuffle]
  (box 
    ; :class "media-buttons"
    :orientation "h"
    (box 
      :halign "start"
      :spacing 10
      (eventbox 
        :class "media xlarge ${CanGoPrevious == false ? "inactive" : "active"}"
        :onclick "playerctl --player=${Name} previous" "󰒮")
      (eventbox 
        :class "media xlarge ${CanPlay == false ? "inactive" : "active"}"
        :onclick "playerctl --player=${Name} play-pause"
        (label 
          :text "${
          Playing == "Playing" ? "󰏤" : "󰐊"
               }"))
      (eventbox 
        :class "media xlarge ${CanGoNext == false ? "inactive" : "active"}"
        :onclick "playerctl --player=${Name} next" "󰒭"
      )
    )
    (box
      :halign "end"
      :spacing 10
      (eventbox
        :class "media xlarge ${loop == "Track" ? "active" :
                        loop == "Playlist" ? "active" :
                        loop == "None" ? "inactive" : 
                        "disabled"
                      }"
        :onclick "playerctl --player=${Name} loop ${
                        loop == "None" ? "track" : 
                        loop == "Track" ? "playlist" : 
                        "none"
                      }"
        (label :text "${loop == "Track" ? "󰑘" : 
                        loop == "Playlist" ? "󰑖" : 
                        loop == "None" ? "󰑖" : 
                        "󰑗"
                      }"
        )
      )
      (eventbox 
        :class "media xlarge ${shuffle == true ? "active" :
                        shuffle == false ? "inactive" : 
                        "disabled"}" 
        :onclick "playerctl --player=${Name} shuffle ${shuffle == true ? "off" : "on"}"
        (label :text "${shuffle == true ? "󰒟" : 
                        shuffle == false ? "󰒞" : 
                        "󰒝"
                       }"
        )
      )
    )
  )
)

(defwidget playerVolume [pvol pmute targetID sinkID serial switch]
  (box
    :hexpand true
    :halign scale_exp
    :space-evenly false
    :visible "${targetID == "null" ? false : true}"
    (box 
      :halign "start" 
      :valign "center" 
      :visible "${arraylength(audio-sinks) > 1 ? true : false}"
      (for s in audio-sinks
        (eventbox
          :onclick "pactl move-sink-input ${serial} ${s.sink}"
          :tooltip "${s.name}"
          :class "media ${s.sink == sinkID ? "active" : "inactive"}"
          (label :text "${s.icon == "audio-speakers" ? "󰓃" :
                          s.icon == "audio-headset-bluetooth" ? "󱡏 " : "?"}"
          )
        )
      )
    )
    (eventbox
      :onhover 'eww update playerVol=true && eww update scale_exp="fill"'
      :onhoverlost 'eww update playerVol=false && eww update scale_exp="start"'
      (box
        :space-evenly false
        (eventbox
          :onclick 'wpctl set-mute ${targetID} toggle'
          (box :space-evenly false :valign "center"
            (image 
              :class "pushright" 
              :image-height 16 
              :path "./assets/icons/audio-${pmute == "true" ? "muted" : "high"}.svg"
            )
            (label 
              :class "${pmute == true ? "red" : ""}"
              :text pvol
            )
          )
        )
        (revealer
          :transition "slideleft"
          :reveal "${playerVol == true ? "${playerhov == switch ? true : false}": false}"
          :duration "1000ms"
          (scale
            :class "low-vis pushleft pushright pushdown"
            :width 150
            :value pvol
            :onchange "./scripts/set-volume ${targetID} {}"
            :max 101
            :min 0
          )
        )
      )
    )
  )
)

(defvar playerVol false)
(defvar scale_exp "start")
(defvar playerhov "")
